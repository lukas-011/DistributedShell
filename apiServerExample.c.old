/**
 * This was the original code generated by ChatGPT for the sever. All other code was written by us, and the code below
 * was modified to suit our needs. This old code is included as full transparency of what was generated with AI and to
 * comply with the academic honesty policy.
 *
 * Prompt: "can you write a simple api endpoint in c that i can hit with netcat"
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

// Note - we did not include this method in our code.
void handle_api_request(int client_socket) {
    const char* api_response = "HTTP/1.1 200 OK\r\n"
                               "Content-Type: text/plain\r\n"
                               "\r\n"
                               "Hello from the API endpoint!\n";

    send(client_socket, api_response, strlen(api_response), 0);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_address, client_address;
    socklen_t client_address_len = sizeof(client_address);
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Initialize server_address structure
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(PORT);

    // Bind the socket
    if (bind(server_socket, (struct sockaddr*)&server_address, sizeof(server_address)) == -1) {
        perror("Socket binding failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 5) == -1) {
        perror("Socket listening failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    // Accept incoming connections
    if ((client_socket = accept(server_socket, (struct sockaddr*)&client_address, &client_address_len)) == -1) {
        perror("Connection acceptance failed");
        exit(EXIT_FAILURE);
    }

    printf("Client connected: %s\n", inet_ntoa(client_address.sin_addr));

    // Receive data from the client
    ssize_t bytes_received;
    while ((bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        buffer[bytes_received] = '\0';  // Null-terminate the received data
        printf("Received from client:\n%s", buffer);

        // Check if the request is for the API endpoint
        if (strstr(buffer, "GET /api") != NULL) {
            handle_api_request(client_socket);
            break;
        }
    }

    if (bytes_received == -1) {
        perror("Error in receiving data");
        exit(EXIT_FAILURE);
    }

    // Close the sockets
    close(client_socket);
    close(server_socket);

    return 0;
}